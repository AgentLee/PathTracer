#include "specularbrdf.h"

Color3f SpecularBRDF::f(const Vector3f &wo, const Vector3f &wi) const
{
    return Color3f(0.f);
}


float SpecularBRDF::Pdf(const Vector3f &wo, const Vector3f &wi) const
{
    return 0.f;
}

/// This BRDF is perfectly specular
/// wi should be generated by reflecting wo about the surface normal.
///
/// BxDF::Sample_f is always in tangent space
///     surface normal is always in (0,0,1)
///
/// f and Pdf return 0 because we assume wi has a 0% chance of being
/// set to the mirror
Color3f SpecularBRDF::Sample_f(const Vector3f &wo, Vector3f *wi, const Point2f &sample, Float *pdf, BxDFType *sampledType) const
{
    //TODO!

    Color3f color(0.f);

    // Reflect wi
    *wi = Vector3f(-wo.x, -wo.y, wo.z);

    *pdf = 1.f;

    // Do a naive fresnel evaulate for now
    color = fresnel->Evaluate(wi->z) * R / AbsCosTheta(*wi);

    return color;
}
