#include "csg.h"

#define IN 0
#define OUT 1

enum operation
{
    NO_OP        = 0,
    UNION       = 1,
    DIFF        = 2,
    INTERSECT   = 3
};

// ----------------------------------
// CSG Node
// ----------------------------------
CSGNode::CSGNode() :
    left(nullptr), right(nullptr), prim(nullptr), operation(NO_OP)
{

}

CSGNode::CSGNode(std::shared_ptr<Primitive> p) :
    left(nullptr), right(nullptr), prim(p), operation(NO_OP)
{

}

CSGNode::CSGNode(int op) :
    left(nullptr), right(nullptr), prim(nullptr), operation(op)
{

}

CSGNode::~CSGNode()
{

}


// ----------------------------------
// CSG
// ----------------------------------
CSG::CSG()
{
    root = new CSGNode();
}

CSG::CSG(const std::vector<std::shared_ptr<Primitive> > &p)
{
    std::cout << "Building CSG" << std::endl;

    // TEST ------------------------------------------------
    // Find the primitive that's marked with "csg"
    // Use "CSG_Test.json" and "CSG_CornellBox.json"
    // Don't take into account lights, walls, or floors.
    std::vector<std::shared_ptr<Primitive>> prims;
    for(int i = 0; i < p.size(); i++) {
        if(p.at(i)->material == nullptr) {
            continue;
        }

        if(!p.at(i)->csg) {
            continue;
        }

        prims.push_back(p.at(i));
    }

    root        = new CSGNode(DIFF);
    root->left  = new CSGNode(prims.at(0));     // Cube
    root->right = new CSGNode(prims.at(1));     // Sphere

#define DEBUG
#ifndef DEBUG
    std::cout << root->left->prim->name.toStdString() << std::endl;
    std::cout << root->right->prim->name.toStdString() << std::endl;
#endif
}

CSG::~CSG()
{

}

// Pass in the left or right child and determine if the ray
// hits the primitive that the CSGNode holds.
bool CSG::hitsObject(CSGNode *T, const Ray &r, Intersection *isect) const
{
    bool hits        = false;
    Intersection isx = Intersection();

    if(T->prim->Intersect(r, &isx)) {
        if(isx.t < isect->t || isect->t < 0) {
            *isect = isx;

            hits = true;
        }
    }

    return hits;
}

// Ray march through the object to find its start and end points
void CSG::rayMarch(CSGNode *T, const Ray &r, Intersection *isect, std::pair<Point3f, Point3f> &inOut) const
{
    float t         = 0.f;
    float step      = 0.1f;

    // Check subtree
    Point3f in(0.f);
    Point3f out(0.f);

    Ray ray = r.GetTransformedCopy(T->prim->shape->transform.invT());

    // Entry point is the first point in the ray march
    in = ray.origin + (ray.direction * t);

    // Increment for march
    t += step;

    // Ray march
    for(int i = 0; i < 500; i++) {
        // Get ray marched point
        Point3f p = ray.origin + (ray.direction * t);

        // Check to see if we left the object by creating a new ray
        // with the point as the origin
        Ray _r_ = Ray(p, ray.direction);
        // Take it back to world space so the intersection test can work
        _r_ = _r_.GetTransformedCopy(T->prim->shape->transform.T());

        // Check to see if the ray hits the object
        bool hit = false;
        Intersection isx = Intersection();
        if(T->prim->Intersect(_r_, &isx)) {
            hit = true;
        }

        // Still in the object
        if(hit) {
            t += step;
        }
        // Left the object
        else {
            t -= step;

            out = ray.origin + (ray.direction * t);

            break;
        }
    }

    // Bring in and out to world space to compare with the other object
    in  = Point3f(T->prim->shape->transform.T() * glm::vec4(in, 1.f));
    out = Point3f(T->prim->shape->transform.T() * glm::vec4(out, 1.f));

    // Set the inOut pair
    inOut.first     = in;
    inOut.second    = out;
}

bool CSG::getIntersectionPoints(const std::shared_ptr<Primitive> prim, const Ray &r, Intersection *isect, Point3f &in, Point3f &out) const
{
    Point3f     origin(0.f);
    Point3f     offset(0.f);
    Vector3f    direction(0.f);

    // Check to see if the ray hits the primitive in question
    if(prim->Intersect(r, isect)) {
        // Set the origin to the intersection point
        origin      = isect->point;
        direction   = glm::normalize(r.direction);
        // Update offset for new ray (ray march kinda)
        offset      = origin + (direction * .1f);
    } else {
        return false;
    }

    // Make a ray
    Ray ray = Ray(offset, direction);
    // This point isn't visible to the camera so it doesn't
    // make sense to set the scene's isect to the potential out point.
    Intersection isx = Intersection();
    // Check to see if this ray hits the end of the object
    if(prim->Intersect(ray, &isx)) {
        in  = origin;
        out = isx.point;
    }

//#define PRINT
#ifndef PRINT
    std::cout << prim->name.toStdString() << " IN: " << in.x << ", " << in.y << ", " << in.z << std::endl;
    std::cout << prim->name.toStdString() << " OUT: " << out.x << ", " << out.y << ", " << out.z << std::endl;
#endif

    return true;
}

// TODO
bool CSG::Intersect(CSGNode *T, const Ray &r, Intersection *isect) const
{
    bool result = false;
    switch(T->operation)
    {
    case DIFF:
        result = diffOp(T->left, T->right, r, isect);
        break;
    case INTERSECT:
        result = intersectOp(T->left, T->right, r, isect);
        break;
    default:    // NO_OP or UNION
        break;
    }


    return result;

    Point3f leftIn(-9999.f);
    Point3f leftOut(-9999.f);
    Point3f rightIn(-9999.f);
    Point3f rightOut(-9999.f);

    // Left Node
    Intersection leftIsx = Intersection();
    bool hitsLeftEntry = T->left->prim->Intersect(r, &leftIsx);

    // Find entry and exit points
    if(hitsLeftEntry) {
        // Entry point is the first intersection point
        leftIn = leftIsx.point;

        Point3f origin = leftIn;
        Vector3f direction = glm::normalize(r.direction);
        // Offset origin by a small step size (ray march)
        origin = origin + (direction * .1f);
        // Make a new ray
        Ray ray = Ray(origin, direction);

        // See where the ray hits the object for the exit point
        bool hitsExit = T->left->prim->Intersect(ray, &leftIsx);
        if(hitsExit) {
            leftOut = leftIsx.point;
        }
    }

//    std::cout << T->left->prim->name.toStdString() << " IN: " << leftIn.x << ", " << leftIn.y << ", " << leftIn.z << std::endl;
//    std::cout << T->left->prim->name.toStdString() << " OUT: " << leftOut.x << ", " << leftOut.y << ", " << leftOut.z << std::endl;


    // Right Node
    Intersection rightIsx = Intersection();
    bool hitsRightEntry = T->right->prim->Intersect(r, &rightIsx);

    // FInd entry and exit points
    if(hitsRightEntry) {
        // Entry point is the first intersection point
        rightIn = rightIsx.point;

        Point3f origin = rightIn;
        Point3f direction = glm::normalize(r.direction);
        // Offset origin by a small step size (ray march)
        origin = origin + (direction * .1f);
        // Make a new ray
        Ray ray = Ray(origin, direction);

        // See where the ray hits the object for the exit point
        bool hitsExit = T->right->prim->Intersect(ray, &rightIsx);
        if(hitsExit) {
            rightOut = rightIsx.point;
        }
    }

    // FOR THE CUBE/SPHERE
    // Sphere.in, Cube.in, Sphere.out, Cube.out
    std::pair<Point3f, QString> sphereIn(rightIn, T->right->prim->name);
    std::pair<Point3f, QString> sphereOut(rightOut, T->right->prim->name);
    std::pair<Point3f, QString> cubeIn(leftIn, T->left->prim->name);
    std::pair<Point3f, QString> cubeOut(leftOut, T->left->prim->name);

    std::vector<std::pair<Point3f, QString>> sortedPoints;
    sortedPoints.push_back(sphereIn);
    sortedPoints.push_back(cubeIn);
    sortedPoints.push_back(sphereOut);
    sortedPoints.push_back(cubeOut);

    return true;

//    // Intersection Test
//    if(prim == T->left->prim) {
//        isect = &leftIsx;
//    } else if(prim == T->right->prim) {
//        isect = &rightIsx;
//    }

//    if(!hitsLeftEntry && !hitsRightEntry) {
//        return false;
//    } else if(hitsLeftEntry && hitsRightEntry) {
//        return true;
//    }



//    std::cout << T->right->prim->name.toStdString() << " IN: " << rightIn.x << ", " << rightIn.y << ", " << rightIn.z << std::endl;
//    std::cout << T->right->prim->name.toStdString() << " OUT: " << rightOut.x << ", " << rightOut.y << ", " << rightOut.z << std::endl;

//    std::cout << "------------------------------------------------------------------------" << std::endl;

    // Return this for now.
//    return prim->Intersect(r, isect);



//    Point3f in(0.f);
//    Point3f out(0.f);

//    return getIntersectionPoints(prim, r, isect, in, out);
}

// TODO
// Combine LL and RL into one list by Z value
// Then depending on the operation we handle each case differently
bool CSG::combineSegments(std::vector<std::pair<Point3f, Point3f>> LL,
                          std::vector<std::pair<Point3f, Point3f>> RL,
                          int operation)
{
    // Sorted list to hold LL + RL
    std::vector<std::pair<Point3f, Point3f>> insAndOuts;

    // Copy LL into insAndOuts
    for(int i = 0; i < LL.size(); i++) {
        insAndOuts.push_back(LL.at(i));
    }

    switch(operation)
    {
    case NO_OP:
        break;
    case UNION:
//        unionOp();
        break;
    case DIFF:
//        diffOp();
        break;
    case INTERSECT:
//        intersectOp();
        break;
    default:
        break;
    }

    return false;
}


// ----------------------------------
// CSG Set Operations
// ----------------------------------
// Returns true if the point should
// be included in the final geometry.
// Returns false otherwise.
// ----------------------------------

// TODO
bool CSG::unionOp(CSGNode *left, CSGNode *right,  const Ray &r, Intersection *isect) const
{
    Intersection lIsx, rIsx;
    bool hitsLeftNode   = left->prim->Intersect(r, &lIsx);
    bool hitsRightNode  = right->prim->Intersect(r, &rIsx);

    if(hitsLeftNode && !hitsRightNode) {
        left->prim->Intersect(r, isect);
    } else if(!hitsLeftNode && hitsRightNode) {
        right->prim->Intersect(r, isect);
    } else if(hitsLeftNode && hitsRightNode) {
        // Update the intersection from scene
        // Use the z value to determine which to set.
        if(lIsx.point.z < rIsx.point.z) {
            left->prim->Intersect(r, isect);
        } else {
            right->prim->Intersect(r, isect);
        }
    } else if(!hitsLeftNode && !hitsRightNode) {
        // Doesn't hit either of the primitives so reset the intersection
        *isect = Intersection();

        // Return false since the ray doesn't hit the primitives
        return false;
    }
}

// TODO
// Left - Right
// Cube - Sphere
bool CSG::diffOp(CSGNode *left, CSGNode *right, const Ray &r, Intersection *isect) const
{
    Intersection lIsx, rIsx;
    bool hitsLeftNode   = left->prim->Intersect(r, &lIsx);
    bool hitsRightNode  = right->prim->Intersect(r, &rIsx);

    // Hits Cube and not Sphere
    if(hitsLeftNode && !hitsRightNode) {
        // Set the intersection to the left primitive
        left->prim->Intersect(r, isect);

        return true;
    }

    // Hits Sphere and not Cube
    if(hitsRightNode && !hitsLeftNode) {
        // Considered not an intersection point for CSG
        // So reset the intersection and return false
        *isect = Intersection();

        return false;
    }

    // Hits Cube and Sphere
    if(hitsLeftNode && hitsRightNode) {
        // Ray march through the objects to see where the difference lies
        // For the Cube and Sphere: just see where the Sphere ends and use that
        // as the intersection point and cast a ray from that point to the cube.

        // Get the start point for left node (Cube)
        Point3f leftStart = lIsx.point;

        // New ray to find left end intersection
        Vector3f direction  = glm::normalize(r.direction);
        Point3f origin      = leftStart + (direction * 0.1f);
        Ray leftRay         = Ray(origin, direction);

        // Get the end point for the left node (Cube)
        Point3f leftEnd;
        bool hitsLeftEnd = left->prim->Intersect(leftRay, &lIsx);
        if(hitsLeftEnd) {
            leftEnd = lIsx.point;
        }

        // Get the start point for the right node (Sphere)
        Point3f rightStart = rIsx.point;

        // New ray to find right end intersection
        origin              = rightStart + (direction * 0.1f);
        Ray rightRay        = Ray(origin, direction);

        // Get the end point for the right node (Sphere)
        Point3f rightEnd;
        bool hitsRightEnd = right->prim->Intersect(rightRay, &rIsx);
        if(hitsRightEnd) {
            rightEnd = rIsx.point;
        }

        float t     = 0.f;
        float step  = 0.1f;

        // Make a temp ray
        Ray ray = r;

        // Ray march 1000 times or until we hit the outside of the cube
        for(int i = 0; i < 1000; i++) {
            // Get point on ray
            Vector3f d  = glm::normalize(ray.direction);
            Point3f p   = ray.origin + (d * t);

            // Make a new ray to see if it hits the objects using p
            Ray _ray_ = Ray(p, d);

            // Get intersection for left node
            Intersection _lIsx;
            bool _hitsLeftNode = left->prim->Intersect(_ray_, &_lIsx);

            // Get intersection for right node
            Intersection _rIsx;
            bool _hitsRightNode = right->prim->Intersect(_ray_, &_rIsx);

            // Hits left and not right (Cube and not Sphere)
            // We are passed the right object.
            // This is the intersection that we return true.
            if(_hitsLeftNode && !_hitsRightNode) {
                bool intersection = left->prim->Intersect(_ray_, isect);

                return true;
            }

            // Doesn't hit left and right (not Cube and not Sphere)
            // Basically left both objects and went too far.
            if(!_hitsLeftNode && !_hitsRightNode) {
                // Revert to when the t value hit the objects
                t -= step;
                // Make the step size smaller
                step /= 4.f;
            }

            // Hits left and right (Cube and Sphere)
            // We still need to ray march through the objects
            // since we're either in just the right object or both left and right.
            if(_hitsLeftNode && _hitsRightNode) {
                // Do nothing
            }

            // Increment t for next step
            t += step;
        }
    }

    // If we reached here then we obviously have no intersection and return false
    *isect = Intersection();
    return false;
}

bool CSG::intersectOp(CSGNode *left, CSGNode *right, const Ray &r, Intersection *isect) const
{
    Intersection lIsx, rIsx;
    bool hitsLeftNode   = left->prim->Intersect(r, &lIsx);
    bool hitsRightNode  = right->prim->Intersect(r, &rIsx);

    if(hitsLeftNode && hitsRightNode) {
        // TODO ----------------------------
        // Figure out why I can't just set
        // the two intersections to each other
        // ---------------------------------
        // Update the intersection from scene
        if(lIsx.point.z < rIsx.point.z) {
            left->prim->Intersect(r, isect);
        } else {
            right->prim->Intersect(r, isect);
        }

        // Return true since the ray hits the intersection of the two primitives
        return true;
    }

    // Doesn't hit either of the primitives so reset the intersection
    *isect = Intersection();
    // Return false since the ray doesn't hit the primitives
    return false;
}
